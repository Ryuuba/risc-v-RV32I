/**
 * This is an autogenerated netlist code from CircuitVerse. Verilog Code can be
 * tested on https://www.edaplayground.com/ using Icarus Verilog 0.9.7. This is an
 * experimental module and some manual changes make need to be done in order for
 * this to work.
 *
 * If you have any ideas/suggestions or bug fixes, raise an issue
 * on https://github.com/CircuitVerse/CircuitVerse/issues/new/choose
 */

/*
  Element Usage Report
    Input - 45 times
    Splitter - 56 times
    Multiplexer - 201 times
    Output - 37 times
    Rom - 32 times
    ConstantVal - 15 times
    DflipFlop - 32 times
    Demultiplexer - 3 times
    SubCircuit - 24 times
    Adder - 3 times
    AndGate - 6 times
    OrGate - 15 times
    NorGate - 3 times
    NotGate - 4 times
    Tunnel - 4 times
    RAM - 1 times
*/

/*
  Usage Instructions and Tips
    Labels - Ensure unique label names and avoid using verilog keywords
    Warnings - Connect all optional inputs to remove warnings
*/

// Sample Testbench Code - Uncomment to use

/*
module TestBench();

  reg clk, clr;


  Processor DUT0(clk, clr);

  initial begin
    clk = 0;
    clr = 0;

    #15

    #10

    $finish;

  end
endmodule

*/

module DataReversal(Out, left, In);
  output [31:0] Out;
  input left;
  input [31:0] In;
  wire Multiplexer_0_out, Multiplexer_31_out, Multiplexer_1_out, Multiplexer_24_out, Multiplexer_2_out, Multiplexer_30_out, Multiplexer_3_out, Multiplexer_29_out, Multiplexer_4_out, Multiplexer_28_out, Multiplexer_5_out, Multiplexer_27_out, Multiplexer_6_out, Multiplexer_26_out, Multiplexer_7_out, Multiplexer_25_out, Multiplexer_8_out, Multiplexer_23_out, Multiplexer_9_out, Multiplexer_22_out, Multiplexer_10_out, Multiplexer_21_out, Multiplexer_11_out, Multiplexer_20_out, Multiplexer_12_out, Multiplexer_19_out, Multiplexer_13_out, Multiplexer_18_out, Multiplexer_14_out, Multiplexer_17_out, Multiplexer_15_out, Multiplexer_16_out;
  wire [31:0] Splitter_1_cmb;
  
  Multiplexer2 Multiplexer_0(Multiplexer_0_out, In[0], In[31], left);
  assign Splitter_1_cmb = {Multiplexer_31_out,Multiplexer_24_out,Multiplexer_30_out,Multiplexer_29_out,Multiplexer_28_out,Multiplexer_27_out,Multiplexer_26_out,Multiplexer_25_out,Multiplexer_23_out,Multiplexer_22_out,Multiplexer_21_out,Multiplexer_20_out,Multiplexer_19_out,Multiplexer_18_out,Multiplexer_17_out,Multiplexer_16_out,Multiplexer_15_out,Multiplexer_14_out,Multiplexer_13_out,Multiplexer_12_out,Multiplexer_11_out,Multiplexer_10_out,Multiplexer_9_out,Multiplexer_8_out,Multiplexer_7_out,Multiplexer_6_out,Multiplexer_5_out,Multiplexer_4_out,Multiplexer_3_out,Multiplexer_2_out,Multiplexer_1_out,Multiplexer_0_out};
  assign Out = Splitter_1_cmb;
  Multiplexer2 Multiplexer_31(Multiplexer_31_out, In[31], In[0], left);
  Multiplexer2 Multiplexer_1(Multiplexer_1_out, In[1], In[30], left);
  Multiplexer2 Multiplexer_24(Multiplexer_24_out, In[30], In[1], left);
  Multiplexer2 Multiplexer_2(Multiplexer_2_out, In[2], In[29], left);
  Multiplexer2 Multiplexer_30(Multiplexer_30_out, In[29], In[2], left);
  Multiplexer2 Multiplexer_3(Multiplexer_3_out, In[3], In[28], left);
  Multiplexer2 Multiplexer_29(Multiplexer_29_out, In[28], In[3], left);
  Multiplexer2 Multiplexer_4(Multiplexer_4_out, In[4], In[27], left);
  Multiplexer2 Multiplexer_28(Multiplexer_28_out, In[27], In[4], left);
  Multiplexer2 Multiplexer_5(Multiplexer_5_out, In[5], In[26], left);
  Multiplexer2 Multiplexer_27(Multiplexer_27_out, In[26], In[5], left);
  Multiplexer2 Multiplexer_6(Multiplexer_6_out, In[6], In[25], left);
  Multiplexer2 Multiplexer_26(Multiplexer_26_out, In[25], In[6], left);
  Multiplexer2 Multiplexer_7(Multiplexer_7_out, In[7], In[24], left);
  Multiplexer2 Multiplexer_25(Multiplexer_25_out, In[24], In[7], left);
  Multiplexer2 Multiplexer_8(Multiplexer_8_out, In[8], In[23], left);
  Multiplexer2 Multiplexer_23(Multiplexer_23_out, In[23], In[8], left);
  Multiplexer2 Multiplexer_9(Multiplexer_9_out, In[9], In[22], left);
  Multiplexer2 Multiplexer_22(Multiplexer_22_out, In[22], In[9], left);
  Multiplexer2 Multiplexer_10(Multiplexer_10_out, In[10], In[21], left);
  Multiplexer2 Multiplexer_21(Multiplexer_21_out, In[21], In[10], left);
  Multiplexer2 Multiplexer_11(Multiplexer_11_out, In[11], In[20], left);
  Multiplexer2 Multiplexer_20(Multiplexer_20_out, In[20], In[11], left);
  Multiplexer2 Multiplexer_12(Multiplexer_12_out, In[12], In[19], left);
  Multiplexer2 Multiplexer_19(Multiplexer_19_out, In[19], In[12], left);
  Multiplexer2 Multiplexer_13(Multiplexer_13_out, In[13], In[18], left);
  Multiplexer2 Multiplexer_18(Multiplexer_18_out, In[18], In[13], left);
  Multiplexer2 Multiplexer_14(Multiplexer_14_out, In[14], In[17], left);
  Multiplexer2 Multiplexer_17(Multiplexer_17_out, In[17], In[14], left);
  Multiplexer2 Multiplexer_15(Multiplexer_15_out, In[15], In[16], left);
  Multiplexer2 Multiplexer_16(Multiplexer_16_out, In[16], In[15], left);
endmodule

module ROM(RD, A);
  output [31:0] RD;
  input [31:0] A;
  wire const_0;
  wire [7:0] Rom_31_DataOut, Rom_30_DataOut, Rom_29_DataOut, Rom_28_DataOut, Rom_27_DataOut, Rom_26_DataOut, Rom_25_DataOut, Rom_24_DataOut, Rom_23_DataOut, Rom_22_DataOut, Rom_21_DataOut, Rom_20_DataOut, Rom_19_DataOut, Rom_18_DataOut, Rom_17_DataOut, Rom_16_DataOut, Rom_15_DataOut, Rom_14_DataOut, Rom_13_DataOut, Rom_12_DataOut, Rom_11_DataOut, Rom_10_DataOut, Rom_9_DataOut, Rom_8_DataOut, Rom_6_DataOut, Rom_5_DataOut, Rom_4_DataOut, Rom_3_DataOut, Rom_2_DataOut, Rom_7_DataOut, Rom_1_DataOut, Rom_0_DataOut;
  wire [31:0] Multiplexer_0_out, Splitter_7_cmb, Splitter_6_cmb, Splitter_5_cmb, Splitter_4_cmb, Splitter_3_cmb, Splitter_2_cmb, Splitter_1_cmb, Splitter_0_cmb;
  
  
  Multiplexer8 #(32) Multiplexer_0(Multiplexer_0_out, Splitter_0_cmb, Splitter_1_cmb, Splitter_2_cmb, Splitter_3_cmb, Splitter_4_cmb, Splitter_5_cmb, Splitter_6_cmb, Splitter_7_cmb, A[8:6]);
  assign RD = Multiplexer_0_out;
  Rom0 Rom_31(Rom_31_DataOut, A[5:2], const_0);
  assign Splitter_7_cmb = {Rom_28_DataOut,Rom_29_DataOut,Rom_30_DataOut,Rom_31_DataOut};
  Rom1 Rom_30(Rom_30_DataOut, A[5:2], const_0);
  Rom2 Rom_29(Rom_29_DataOut, A[5:2], const_0);
  Rom3 Rom_28(Rom_28_DataOut, A[5:2], const_0);
  Rom4 Rom_27(Rom_27_DataOut, A[5:2], const_0);
  assign Splitter_6_cmb = {Rom_24_DataOut,Rom_25_DataOut,Rom_26_DataOut,Rom_27_DataOut};
  Rom5 Rom_26(Rom_26_DataOut, A[5:2], const_0);
  Rom6 Rom_25(Rom_25_DataOut, A[5:2], const_0);
  Rom7 Rom_24(Rom_24_DataOut, A[5:2], const_0);
  Rom8 Rom_23(Rom_23_DataOut, A[5:2], const_0);
  assign Splitter_5_cmb = {Rom_20_DataOut,Rom_21_DataOut,Rom_22_DataOut,Rom_23_DataOut};
  Rom9 Rom_22(Rom_22_DataOut, A[5:2], const_0);
  Rom10 Rom_21(Rom_21_DataOut, A[5:2], const_0);
  Rom11 Rom_20(Rom_20_DataOut, A[5:2], const_0);
  Rom12 Rom_19(Rom_19_DataOut, A[5:2], const_0);
  assign Splitter_4_cmb = {Rom_16_DataOut,Rom_17_DataOut,Rom_18_DataOut,Rom_19_DataOut};
  Rom13 Rom_18(Rom_18_DataOut, A[5:2], const_0);
  Rom14 Rom_17(Rom_17_DataOut, A[5:2], const_0);
  Rom15 Rom_16(Rom_16_DataOut, A[5:2], const_0);
  Rom16 Rom_15(Rom_15_DataOut, A[5:2], const_0);
  assign Splitter_3_cmb = {Rom_12_DataOut,Rom_13_DataOut,Rom_14_DataOut,Rom_15_DataOut};
  Rom17 Rom_14(Rom_14_DataOut, A[5:2], const_0);
  Rom18 Rom_13(Rom_13_DataOut, A[5:2], const_0);
  Rom19 Rom_12(Rom_12_DataOut, A[5:2], const_0);
  Rom20 Rom_11(Rom_11_DataOut, A[5:2], const_0);
  assign Splitter_2_cmb = {Rom_8_DataOut,Rom_9_DataOut,Rom_10_DataOut,Rom_11_DataOut};
  Rom21 Rom_10(Rom_10_DataOut, A[5:2], const_0);
  Rom22 Rom_9(Rom_9_DataOut, A[5:2], const_0);
  Rom23 Rom_8(Rom_8_DataOut, A[5:2], const_0);
  Rom24 Rom_6(Rom_6_DataOut, A[5:2], const_0);
  assign Splitter_1_cmb = {Rom_3_DataOut,Rom_4_DataOut,Rom_5_DataOut,Rom_6_DataOut};
  Rom25 Rom_5(Rom_5_DataOut, A[5:2], const_0);
  Rom26 Rom_4(Rom_4_DataOut, A[5:2], const_0);
  Rom27 Rom_3(Rom_3_DataOut, A[5:2], const_0);
  Rom28 Rom_2(Rom_2_DataOut, A[5:2], const_0);
  assign Splitter_0_cmb = {Rom_0_DataOut,Rom_1_DataOut,Rom_7_DataOut,Rom_2_DataOut};
  Rom29 Rom_7(Rom_7_DataOut, A[5:2], const_0);
  Rom30 Rom_1(Rom_1_DataOut, A[5:2], const_0);
  Rom31 Rom_0(Rom_0_DataOut, A[5:2], const_0);
  assign const_0 = 1'b1;
endmodule

module RegFile(RD2, RD1, WE3, A3, WD3, clk, A1, A2);
  output [31:0] RD2, RD1;
  input WE3, clk;
  input [4:0] A3, A1, A2;
  input [31:0] WD3;
  wire Demultiplexer_0_out_0, Demultiplexer_0_out_1, Demultiplexer_0_out_2, Demultiplexer_0_out_3, Demultiplexer_0_out_4, Demultiplexer_0_out_5, Demultiplexer_0_out_6, Demultiplexer_0_out_7, Demultiplexer_0_out_8, Demultiplexer_0_out_9, Demultiplexer_0_out_10, Demultiplexer_0_out_11, Demultiplexer_0_out_12, Demultiplexer_0_out_13, Demultiplexer_0_out_14, Demultiplexer_0_out_15, Demultiplexer_0_out_16, Demultiplexer_0_out_17, Demultiplexer_0_out_18, Demultiplexer_0_out_19, Demultiplexer_0_out_20, Demultiplexer_0_out_21, Demultiplexer_0_out_22, Demultiplexer_0_out_23, Demultiplexer_0_out_24, Demultiplexer_0_out_25, Demultiplexer_0_out_26, Demultiplexer_0_out_27, Demultiplexer_0_out_28, Demultiplexer_0_out_29, Demultiplexer_0_out_30;
  wire [31:0] Multiplexer_0_out, Multiplexer_1_out, ra_Q, s1_Q, a7_Q, s9_Q, sp_Q, a0_Q, s2_Q, s10_Q, gp_Q, a1_Q, s3_Q, s11_Q, tp_Q, a2_Q, s4_Q, t3_Q, t0_Q, a3_Q, s5_Q, t4_Q, t1_Q, a4_Q, s6_Q, t5_Q, t2_Q, a5_Q, s7_Q, t6_Q, s0_Q, a6_Q, s8_Q, zero;
  Multiplexer32 #(32) Multiplexer_0(Multiplexer_0_out, zero, ra_Q, sp_Q, gp_Q, tp_Q, t0_Q, t1_Q, t2_Q, s0_Q, s1_Q, a0_Q, a1_Q, a2_Q, a3_Q, a4_Q, a5_Q, a6_Q, a7_Q, s2_Q, s3_Q, s4_Q, s5_Q, s6_Q, s7_Q, s8_Q, s9_Q, s10_Q, s11_Q, t3_Q, t4_Q, t5_Q, t6_Q, A2);
  assign RD2 = Multiplexer_0_out;
  Multiplexer32 #(32) Multiplexer_1(Multiplexer_1_out, zero, ra_Q, sp_Q, gp_Q, tp_Q, t0_Q, t1_Q, t2_Q, s0_Q, s1_Q, a0_Q, a1_Q, a2_Q, a3_Q, a4_Q, a5_Q, a6_Q, a7_Q, s2_Q, s3_Q, s4_Q, s5_Q, s6_Q, s7_Q, s8_Q, s9_Q, s10_Q, s11_Q, t3_Q, t4_Q, t5_Q, t6_Q, A1);
  assign RD1 = Multiplexer_1_out;
  DflipFlop #(32) ra(ra_Q, , clk, WD3, , , Demultiplexer_0_out_0);
  DflipFlop #(32) s1(s1_Q, , clk, WD3, , , Demultiplexer_0_out_8);
  DflipFlop #(32) a7(a7_Q, , clk, WD3, , , Demultiplexer_0_out_16);
  DflipFlop #(32) s9(s9_Q, , clk, WD3, , , Demultiplexer_0_out_24);
  DflipFlop #(32) sp(sp_Q, , clk, WD3, , , Demultiplexer_0_out_1);
  DflipFlop #(32) a0(a0_Q, , clk, WD3, , , Demultiplexer_0_out_9);
  DflipFlop #(32) s2(s2_Q, , clk, WD3, , , Demultiplexer_0_out_17);
  DflipFlop #(32) s10(s10_Q, , clk, WD3, , , Demultiplexer_0_out_25);
  DflipFlop #(32) gp(gp_Q, , clk, WD3, , , Demultiplexer_0_out_2);
  DflipFlop #(32) a1(a1_Q, , clk, WD3, , , Demultiplexer_0_out_10);
  DflipFlop #(32) s3(s3_Q, , clk, WD3, , , Demultiplexer_0_out_18);
  DflipFlop #(32) s11(s11_Q, , clk, WD3, , , Demultiplexer_0_out_26);
  DflipFlop #(32) tp(tp_Q, , clk, WD3, , , Demultiplexer_0_out_3);
  DflipFlop #(32) a2(a2_Q, , clk, WD3, , , Demultiplexer_0_out_11);
  DflipFlop #(32) s4(s4_Q, , clk, WD3, , , Demultiplexer_0_out_19);
  DflipFlop #(32) t3(t3_Q, , clk, WD3, , , Demultiplexer_0_out_27);
  DflipFlop #(32) t0(t0_Q, , clk, WD3, , , Demultiplexer_0_out_4);
  DflipFlop #(32) a3(a3_Q, , clk, WD3, , , Demultiplexer_0_out_12);
  DflipFlop #(32) s5(s5_Q, , clk, WD3, , , Demultiplexer_0_out_20);
  DflipFlop #(32) t4(t4_Q, , clk, WD3, , , Demultiplexer_0_out_28);
  DflipFlop #(32) t1(t1_Q, , clk, WD3, , , Demultiplexer_0_out_5);
  DflipFlop #(32) a4(a4_Q, , clk, WD3, , , Demultiplexer_0_out_13);
  DflipFlop #(32) s6(s6_Q, , clk, WD3, , , Demultiplexer_0_out_21);
  DflipFlop #(32) t5(t5_Q, , clk, WD3, , , Demultiplexer_0_out_29);
  DflipFlop #(32) t2(t2_Q, , clk, WD3, , , Demultiplexer_0_out_6);
  DflipFlop #(32) a5(a5_Q, , clk, WD3, , , Demultiplexer_0_out_14);
  DflipFlop #(32) s7(s7_Q, , clk, WD3, , , Demultiplexer_0_out_22);
  DflipFlop #(32) t6(t6_Q, , clk, WD3, , , Demultiplexer_0_out_30);
  DflipFlop #(32) s0(s0_Q, , clk, WD3, , , Demultiplexer_0_out_7);
  DflipFlop #(32) a6(a6_Q, , clk, WD3, , , Demultiplexer_0_out_15);
  DflipFlop #(32) s8(s8_Q, , clk, WD3, , , Demultiplexer_0_out_23);
  Demultiplexer32 Demultiplexer_0(, Demultiplexer_0_out_0, Demultiplexer_0_out_1, Demultiplexer_0_out_2, Demultiplexer_0_out_3, Demultiplexer_0_out_4, Demultiplexer_0_out_5, Demultiplexer_0_out_6, Demultiplexer_0_out_7, Demultiplexer_0_out_8, Demultiplexer_0_out_9, Demultiplexer_0_out_10, Demultiplexer_0_out_11, Demultiplexer_0_out_12, Demultiplexer_0_out_13, Demultiplexer_0_out_14, Demultiplexer_0_out_15, Demultiplexer_0_out_16, Demultiplexer_0_out_17, Demultiplexer_0_out_18, Demultiplexer_0_out_19, Demultiplexer_0_out_20, Demultiplexer_0_out_21, Demultiplexer_0_out_22, Demultiplexer_0_out_23, Demultiplexer_0_out_24, Demultiplexer_0_out_25, Demultiplexer_0_out_26, Demultiplexer_0_out_27, Demultiplexer_0_out_28, Demultiplexer_0_out_29, Demultiplexer_0_out_30, WE3, A3);
  assign zero = 32'b00000000000000000000000000000000;
endmodule

module instr_dec(op, imm, A3, f3, A1, A2, f7, immU, instr);
  output [2:0] f3;
  output [4:0] A3, A1, A2;
  output [6:0] op, f7;
  output [19:0] immU;
  output [24:0] imm;
  input [31:0] instr;
  
  
  
  
  
  assign f7 = instr[31:25];
  assign A2 = instr[24:20];
  assign A1 = instr[19:15];
  assign f3 = instr[14:12];
  assign immU = instr[31:12];
  assign A3 = instr[11:7];
  assign imm = instr[31:7];
  assign op = instr[6:0];
endmodule

module imm12(imm32, imm12);
  output [31:0] imm32;
  input [11:0] imm12;
  wire [20:0] Splitter_1_cmb;
  wire [31:0] Splitter_2_cmb;
  
  assign Splitter_1_cmb = {imm12[11],imm12[11],imm12[11],imm12[11],imm12[11],imm12[11],imm12[11],imm12[11],imm12[11],imm12[11],imm12[11],imm12[11],imm12[11],imm12[11],imm12[11],imm12[11],imm12[11],imm12[11],imm12[11],imm12[11],imm12[11]};
  assign Splitter_2_cmb = {Splitter_1_cmb,imm12[10:0]};
  assign imm32 = Splitter_2_cmb;
endmodule

module imm13(imm32, imm13);
  output [31:0] imm32;
  input [12:0] imm13;
  wire [31:0] Splitter_1_cmb;
  
  assign Splitter_1_cmb = {imm13[12],imm13[12],imm13[12],imm13[12],imm13[12],imm13[12],imm13[12],imm13[12],imm13[12],imm13[12],imm13[12],imm13[12],imm13[12],imm13[12],imm13[12],imm13[12],imm13[12],imm13[12],imm13[12],imm13[12],imm13[11:0]};
  assign imm32 = Splitter_1_cmb;
endmodule

module imm21(imm32, imm21);
  output [31:0] imm32;
  input [20:0] imm21;
  wire [31:0] Splitter_1_cmb;
  
  assign Splitter_1_cmb = {imm21[20],imm21[20],imm21[20],imm21[20],imm21[20],imm21[20],imm21[20],imm21[20],imm21[20],imm21[20],imm21[20],imm21[20],imm21[19:0]};
  assign imm32 = Splitter_1_cmb;
endmodule




module \sign-ext (immExt, \31:7  , ImmSrc);
  output [31:0] immExt;
  input [1:0] ImmSrc;
  input [24:0] \31:7  ;
  wire const_1, const_0;
  wire [11:0] Splitter_1_cmb, Splitter_2_cmb;
  wire [12:0] Splitter_3_cmb;
  wire [20:0] Splitter_4_cmb;
  wire [31:0] Multiplexer_0_out, imm12_0_out, imm21_3_out, imm13_2_out, imm12_1_out;
  Multiplexer4 #(32) Multiplexer_0(Multiplexer_0_out, imm12_0_out, imm12_1_out, imm13_2_out, imm21_3_out, ImmSrc);
  assign immExt = Multiplexer_0_out;
  
  assign Splitter_1_cmb = {\31:7  [24],\31:7  [23],\31:7  [22],\31:7  [21],\31:7  [20],\31:7  [19],\31:7  [18],\31:7  [17],\31:7  [16],\31:7  [15],\31:7  [14],\31:7  [13]};
  imm12 imm12_0(imm12_0_out, Splitter_1_cmb);
  assign Splitter_4_cmb = {\31:7  [24],\31:7  [22],\31:7  [11],\31:7  [10],\31:7  [9],\31:7  [22],\31:7  [7],\31:7  [6],\31:7  [5],\31:7  [13],\31:7  [23],\31:7  [22],\31:7  [21],\31:7  [20],\31:7  [19],\31:7  [18],\31:7  [17],\31:7  [16],\31:7  [15],\31:7  [14],const_1};
  imm21 imm21_3(imm21_3_out, Splitter_4_cmb);
  assign Splitter_3_cmb = {\31:7  [24],\31:7  [0],\31:7  [23],\31:7  [22],\31:7  [21],\31:7  [20],\31:7  [19],\31:7  [18],\31:7  [4],\31:7  [3],\31:7  [2],\31:7  [1],const_0};
  imm13 imm13_2(imm13_2_out, Splitter_3_cmb);
  assign Splitter_2_cmb = {\31:7  [24],\31:7  [23],\31:7  [22],\31:7  [21],\31:7  [20],\31:7  [19],\31:7  [18],\31:7  [4],\31:7  [3],\31:7  [2],\31:7  [1],\31:7  [0]};
  imm12 imm12_1(imm12_1_out, Splitter_2_cmb);
  assign const_1 = 1'b0;
  assign const_0 = 1'b0;
endmodule

module plus4(\pc+4  , pc);
  output [31:0] \pc+4  ;
  input [31:0] pc;
  wire const_0;
  wire [31:0] Adder_0_Sum, const_1;
  assign Adder_0_Sum = const_1 + pc + const_0;
  assign \pc+4__ = Adder_0_Sum;
  assign const_1 = 32'b00000000000000000000000000000100;
  assign const_0 = 1'b0;
endmodule

module plusImmExt(\pc+ImmExt  , pc, Imm32);
  output [31:0] \pc+ImmExt  ;
  input [31:0] pc, Imm32;
  wire const_0;
  wire [31:0] Adder_0_Sum;
  assign Adder_0_Sum = Imm32 + pc + const_0;
  assign \pc+ImmExt__ = Adder_0_Sum;
  assign const_0 = 1'b0;
endmodule

module sll12(ImmUExt, immU);
  output [31:0] ImmUExt;
  input [19:0] immU;
  wire [11:0] const_0;
  wire [31:0] Splitter_0_cmb;
  assign Splitter_0_cmb = {immU,const_0};
  assign ImmUExt = Splitter_0_cmb;
  assign const_0 = 12'b000000000000;
endmodule

module CtrlUnit(PCSrc, ResultSrc, MemWrite, ALUCtrl, ALUSrc, ImmSrc, RegWrite, op, Z, f3, f7);
  output MemWrite,  ALUSrc,  RegWrite;
  output [1:0] PCSrc, ResultSrc, ImmSrc;
  output [2:0] ALUCtrl;
  input Z;
  input [2:0] f3;
  input [6:0] op, f7;
  wire and_2_out, or_6_out, Demultiplexer_1_out_0, Demultiplexer_1_out_1, Demultiplexer_1_out_2, Demultiplexer_1_out_3, Demultiplexer_1_out_4, Demultiplexer_1_out_5, Demultiplexer_1_out_6, Demultiplexer_1_out_7, Demultiplexer_1_out_8, Demultiplexer_1_out_9, Demultiplexer_1_out_10, or_5_out, or_4_out, and_1_out, or_3_out, Demultiplexer_0_out_0, Demultiplexer_0_out_1, Demultiplexer_0_out_2, Demultiplexer_0_out_3, Demultiplexer_0_out_4, Demultiplexer_0_out_5, Demultiplexer_0_out_6, Demultiplexer_0_out_7, or_2_out, or_1_out, or_0_out, nor_1_out, nor_0_out, or_8_out, or_7_out, and_0_out, const_0;
  wire [1:0] Splitter_7_cmb, Splitter_2_cmb, Splitter_1_cmb;
  wire [2:0] Splitter_6_cmb;
  wire [4:0] Splitter_4_cmb;
  
  assign and_2_out = Demultiplexer_1_out_4 & f7[5] & op[5];
  assign or_6_out = Demultiplexer_1_out_0 | Demultiplexer_1_out_1 | Demultiplexer_1_out_2 | Demultiplexer_1_out_3 | and_2_out | Demultiplexer_1_out_6 | Demultiplexer_1_out_9 | Demultiplexer_1_out_8;
  assign Splitter_6_cmb = {or_4_out,or_5_out,or_6_out};
  assign ALUCtrl = Splitter_6_cmb;
  assign Splitter_4_cmb = {or_7_out,Demultiplexer_0_out_5,f3};
  Demultiplexer32 Demultiplexer_1(, , , , , , , , Demultiplexer_1_out_0, Demultiplexer_1_out_1, , , Demultiplexer_1_out_2, Demultiplexer_1_out_3, , , Demultiplexer_1_out_4, Demultiplexer_1_out_5, Demultiplexer_1_out_6, , Demultiplexer_1_out_7, Demultiplexer_1_out_8, Demultiplexer_1_out_9, Demultiplexer_1_out_10, , , , , , , , , const_0, Splitter_4_cmb);
  assign or_5_out = Demultiplexer_1_out_9 | Demultiplexer_1_out_10 | Demultiplexer_1_out_5 | Demultiplexer_1_out_8;
  assign or_4_out = Demultiplexer_1_out_6 | Demultiplexer_1_out_7 | Demultiplexer_1_out_5 | Demultiplexer_1_out_8;
  assign and_1_out = Z & Demultiplexer_0_out_5;
  assign or_3_out = and_1_out | Demultiplexer_0_out_7;
  assign Splitter_7_cmb = {Demultiplexer_0_out_6,or_3_out};
  assign PCSrc = Splitter_7_cmb;
  
  Demultiplexer32 Demultiplexer_0(Demultiplexer_0_out_0, , , , Demultiplexer_0_out_1, , , , Demultiplexer_0_out_2, , , , Demultiplexer_0_out_3, Demultiplexer_0_out_4, , , , , , , , , , , Demultiplexer_0_out_5, Demultiplexer_0_out_6, , Demultiplexer_0_out_7, , , , , and_0_out, op[6:2]);
  assign or_2_out = Demultiplexer_0_out_6 | Demultiplexer_0_out_7 | Demultiplexer_0_out_4;
  assign Splitter_2_cmb = {or_2_out,or_8_out};
  assign ResultSrc = Splitter_2_cmb;
  assign or_1_out = Demultiplexer_0_out_2 | Demultiplexer_0_out_7;
  assign Splitter_1_cmb = {or_0_out,or_1_out};
  assign ImmSrc = Splitter_1_cmb;
  assign or_0_out = Demultiplexer_0_out_5 | Demultiplexer_0_out_7;
  assign nor_1_out = ~(Demultiplexer_0_out_3 | Demultiplexer_0_out_5);
  assign ALUSrc = nor_1_out;
  assign nor_0_out = ~(Demultiplexer_0_out_2 | Demultiplexer_0_out_5);
  assign RegWrite = nor_0_out;
  assign or_8_out = Demultiplexer_0_out_0 | Demultiplexer_0_out_4;
  assign or_7_out = Demultiplexer_0_out_3 | Demultiplexer_0_out_1;
  assign MemWrite = Demultiplexer_0_out_2;
  
  assign and_0_out = op[0] & op[1];
  assign const_0 = 1'b1;
endmodule

module S(out_0, inp_0);
  output out_0;
  input [31:0] inp_0;
  
  assign out_0 = inp_0[31];
endmodule

module Z(out_0, inp_0);
  output out_0;
  input [31:0] inp_0;
  wire or_0_out, nor_0_out, or_1_out, or_2_out, or_3_out;
  
  assign or_0_out = inp_0[31] | inp_0[30] | inp_0[29] | inp_0[28] | inp_0[27] | inp_0[26] | inp_0[25] | inp_0[24];
  assign nor_0_out = ~(or_1_out | or_0_out | or_2_out | or_3_out);
  assign out_0 = nor_0_out;
  assign or_1_out = inp_0[23] | inp_0[22] | inp_0[21] | inp_0[20] | inp_0[19] | inp_0[18] | inp_0[17] | inp_0[16];
  assign or_2_out = inp_0[15] | inp_0[14] | inp_0[13] | inp_0[12] | inp_0[11] | inp_0[10] | inp_0[9] | inp_0[8];
  assign or_3_out = inp_0[7] | inp_0[6] | inp_0[5] | inp_0[4] | inp_0[3] | inp_0[2] | inp_0[1] | inp_0[0];
endmodule

module srl16(Out, In, b4);
  output [31:0] Out;
  input b4;
  input [31:0] In;
  wire Multiplexer_31_out, Multiplexer_24_out, Multiplexer_30_out, Multiplexer_29_out, Multiplexer_28_out, Multiplexer_27_out, Multiplexer_26_out, Multiplexer_25_out, Multiplexer_23_out, Multiplexer_22_out, Multiplexer_21_out, Multiplexer_20_out, Multiplexer_19_out, Multiplexer_18_out, Multiplexer_17_out, Multiplexer_16_out, Multiplexer_15_out, Multiplexer_14_out, Multiplexer_13_out, Multiplexer_12_out, Multiplexer_11_out, Multiplexer_10_out, Multiplexer_9_out, Multiplexer_8_out, Multiplexer_7_out, Multiplexer_6_out, Multiplexer_5_out, Multiplexer_4_out, Multiplexer_3_out, Multiplexer_2_out, Multiplexer_1_out, Multiplexer_0_out, const_0;
  wire [31:0] Splitter_1_cmb;
  Multiplexer2 Multiplexer_31(Multiplexer_31_out, In[31], const_0, b4);
  assign Splitter_1_cmb = {Multiplexer_31_out,Multiplexer_24_out,Multiplexer_30_out,Multiplexer_29_out,Multiplexer_28_out,Multiplexer_27_out,Multiplexer_26_out,Multiplexer_25_out,Multiplexer_23_out,Multiplexer_22_out,Multiplexer_21_out,Multiplexer_20_out,Multiplexer_19_out,Multiplexer_18_out,Multiplexer_17_out,Multiplexer_16_out,Multiplexer_15_out,Multiplexer_14_out,Multiplexer_13_out,Multiplexer_12_out,Multiplexer_11_out,Multiplexer_10_out,Multiplexer_9_out,Multiplexer_8_out,Multiplexer_7_out,Multiplexer_6_out,Multiplexer_5_out,Multiplexer_4_out,Multiplexer_3_out,Multiplexer_2_out,Multiplexer_1_out,Multiplexer_0_out};
  assign Out = Splitter_1_cmb;
  Multiplexer2 Multiplexer_24(Multiplexer_24_out, In[30], const_0, b4);
  Multiplexer2 Multiplexer_30(Multiplexer_30_out, In[29], const_0, b4);
  Multiplexer2 Multiplexer_29(Multiplexer_29_out, In[28], const_0, b4);
  Multiplexer2 Multiplexer_28(Multiplexer_28_out, In[27], const_0, b4);
  Multiplexer2 Multiplexer_27(Multiplexer_27_out, In[26], const_0, b4);
  Multiplexer2 Multiplexer_26(Multiplexer_26_out, In[25], const_0, b4);
  Multiplexer2 Multiplexer_25(Multiplexer_25_out, In[24], const_0, b4);
  Multiplexer2 Multiplexer_23(Multiplexer_23_out, In[23], const_0, b4);
  Multiplexer2 Multiplexer_22(Multiplexer_22_out, In[22], const_0, b4);
  Multiplexer2 Multiplexer_21(Multiplexer_21_out, In[21], const_0, b4);
  Multiplexer2 Multiplexer_20(Multiplexer_20_out, In[20], const_0, b4);
  Multiplexer2 Multiplexer_19(Multiplexer_19_out, In[19], const_0, b4);
  Multiplexer2 Multiplexer_18(Multiplexer_18_out, In[18], const_0, b4);
  Multiplexer2 Multiplexer_17(Multiplexer_17_out, In[17], const_0, b4);
  Multiplexer2 Multiplexer_16(Multiplexer_16_out, In[16], const_0, b4);
  Multiplexer2 Multiplexer_15(Multiplexer_15_out, In[15], In[31], b4);
  Multiplexer2 Multiplexer_14(Multiplexer_14_out, In[14], In[30], b4);
  Multiplexer2 Multiplexer_13(Multiplexer_13_out, In[13], In[29], b4);
  Multiplexer2 Multiplexer_12(Multiplexer_12_out, In[12], In[28], b4);
  Multiplexer2 Multiplexer_11(Multiplexer_11_out, In[11], In[27], b4);
  Multiplexer2 Multiplexer_10(Multiplexer_10_out, In[10], In[26], b4);
  Multiplexer2 Multiplexer_9(Multiplexer_9_out, In[9], In[25], b4);
  Multiplexer2 Multiplexer_8(Multiplexer_8_out, In[8], In[24], b4);
  Multiplexer2 Multiplexer_7(Multiplexer_7_out, In[7], In[23], b4);
  Multiplexer2 Multiplexer_6(Multiplexer_6_out, In[6], In[22], b4);
  Multiplexer2 Multiplexer_5(Multiplexer_5_out, In[5], In[21], b4);
  Multiplexer2 Multiplexer_4(Multiplexer_4_out, In[4], In[20], b4);
  Multiplexer2 Multiplexer_3(Multiplexer_3_out, In[3], In[19], b4);
  Multiplexer2 Multiplexer_2(Multiplexer_2_out, In[2], In[18], b4);
  Multiplexer2 Multiplexer_1(Multiplexer_1_out, In[1], In[17], b4);
  Multiplexer2 Multiplexer_0(Multiplexer_0_out, In[0], In[16], b4);
  
  assign const_0 = 1'b0;
endmodule

module srl8(Out, In, b3);
  output [31:0] Out;
  input b3;
  input [31:0] In;
  wire Multiplexer_31_out, Multiplexer_24_out, Multiplexer_30_out, Multiplexer_29_out, Multiplexer_28_out, Multiplexer_27_out, Multiplexer_26_out, Multiplexer_25_out, Multiplexer_23_out, Multiplexer_22_out, Multiplexer_21_out, Multiplexer_20_out, Multiplexer_19_out, Multiplexer_18_out, Multiplexer_17_out, Multiplexer_16_out, Multiplexer_15_out, Multiplexer_14_out, Multiplexer_13_out, Multiplexer_12_out, Multiplexer_11_out, Multiplexer_10_out, Multiplexer_9_out, Multiplexer_8_out, Multiplexer_7_out, Multiplexer_6_out, Multiplexer_5_out, Multiplexer_4_out, Multiplexer_3_out, Multiplexer_2_out, Multiplexer_1_out, Multiplexer_0_out, const_0;
  wire [31:0] Splitter_1_cmb;
  Multiplexer2 Multiplexer_31(Multiplexer_31_out, In[31], const_0, b3);
  assign Splitter_1_cmb = {Multiplexer_31_out,Multiplexer_24_out,Multiplexer_30_out,Multiplexer_29_out,Multiplexer_28_out,Multiplexer_27_out,Multiplexer_26_out,Multiplexer_25_out,Multiplexer_23_out,Multiplexer_22_out,Multiplexer_21_out,Multiplexer_20_out,Multiplexer_19_out,Multiplexer_18_out,Multiplexer_17_out,Multiplexer_16_out,Multiplexer_15_out,Multiplexer_14_out,Multiplexer_13_out,Multiplexer_12_out,Multiplexer_11_out,Multiplexer_10_out,Multiplexer_9_out,Multiplexer_8_out,Multiplexer_7_out,Multiplexer_6_out,Multiplexer_5_out,Multiplexer_4_out,Multiplexer_3_out,Multiplexer_2_out,Multiplexer_1_out,Multiplexer_0_out};
  assign Out = Splitter_1_cmb;
  Multiplexer2 Multiplexer_24(Multiplexer_24_out, In[30], const_0, b3);
  Multiplexer2 Multiplexer_30(Multiplexer_30_out, In[29], const_0, b3);
  Multiplexer2 Multiplexer_29(Multiplexer_29_out, In[28], const_0, b3);
  Multiplexer2 Multiplexer_28(Multiplexer_28_out, In[27], const_0, b3);
  Multiplexer2 Multiplexer_27(Multiplexer_27_out, In[26], const_0, b3);
  Multiplexer2 Multiplexer_26(Multiplexer_26_out, In[25], const_0, b3);
  Multiplexer2 Multiplexer_25(Multiplexer_25_out, In[24], const_0, b3);
  Multiplexer2 Multiplexer_23(Multiplexer_23_out, In[23], In[31], b3);
  Multiplexer2 Multiplexer_22(Multiplexer_22_out, In[22], In[30], b3);
  Multiplexer2 Multiplexer_21(Multiplexer_21_out, In[21], In[29], b3);
  Multiplexer2 Multiplexer_20(Multiplexer_20_out, In[20], In[28], b3);
  Multiplexer2 Multiplexer_19(Multiplexer_19_out, In[19], In[27], b3);
  Multiplexer2 Multiplexer_18(Multiplexer_18_out, In[18], In[26], b3);
  Multiplexer2 Multiplexer_17(Multiplexer_17_out, In[17], In[25], b3);
  Multiplexer2 Multiplexer_16(Multiplexer_16_out, In[16], In[24], b3);
  Multiplexer2 Multiplexer_15(Multiplexer_15_out, In[15], In[23], b3);
  Multiplexer2 Multiplexer_14(Multiplexer_14_out, In[14], In[22], b3);
  Multiplexer2 Multiplexer_13(Multiplexer_13_out, In[13], In[21], b3);
  Multiplexer2 Multiplexer_12(Multiplexer_12_out, In[12], In[20], b3);
  Multiplexer2 Multiplexer_11(Multiplexer_11_out, In[11], In[19], b3);
  Multiplexer2 Multiplexer_10(Multiplexer_10_out, In[10], In[18], b3);
  Multiplexer2 Multiplexer_9(Multiplexer_9_out, In[9], In[17], b3);
  Multiplexer2 Multiplexer_8(Multiplexer_8_out, In[8], In[16], b3);
  Multiplexer2 Multiplexer_7(Multiplexer_7_out, In[7], In[15], b3);
  Multiplexer2 Multiplexer_6(Multiplexer_6_out, In[6], In[14], b3);
  Multiplexer2 Multiplexer_5(Multiplexer_5_out, In[5], In[13], b3);
  Multiplexer2 Multiplexer_4(Multiplexer_4_out, In[4], In[12], b3);
  Multiplexer2 Multiplexer_3(Multiplexer_3_out, In[3], In[11], b3);
  Multiplexer2 Multiplexer_2(Multiplexer_2_out, In[2], In[10], b3);
  Multiplexer2 Multiplexer_1(Multiplexer_1_out, In[1], In[9], b3);
  Multiplexer2 Multiplexer_0(Multiplexer_0_out, In[0], In[8], b3);
  
  assign const_0 = 1'b0;
endmodule

module srl4(Out, In, b2);
  output [31:0] Out;
  input b2;
  input [31:0] In;
  wire Multiplexer_31_out, Multiplexer_24_out, Multiplexer_30_out, Multiplexer_29_out, Multiplexer_28_out, Multiplexer_27_out, Multiplexer_26_out, Multiplexer_25_out, Multiplexer_23_out, Multiplexer_22_out, Multiplexer_21_out, Multiplexer_20_out, Multiplexer_19_out, Multiplexer_18_out, Multiplexer_17_out, Multiplexer_16_out, Multiplexer_15_out, Multiplexer_14_out, Multiplexer_13_out, Multiplexer_12_out, Multiplexer_11_out, Multiplexer_10_out, Multiplexer_9_out, Multiplexer_8_out, Multiplexer_7_out, Multiplexer_6_out, Multiplexer_5_out, Multiplexer_4_out, Multiplexer_3_out, Multiplexer_2_out, Multiplexer_1_out, Multiplexer_0_out, const_0;
  wire [31:0] Splitter_1_cmb;
  Multiplexer2 Multiplexer_31(Multiplexer_31_out, In[31], const_0, b2);
  assign Splitter_1_cmb = {Multiplexer_31_out,Multiplexer_24_out,Multiplexer_30_out,Multiplexer_29_out,Multiplexer_28_out,Multiplexer_27_out,Multiplexer_26_out,Multiplexer_25_out,Multiplexer_23_out,Multiplexer_22_out,Multiplexer_21_out,Multiplexer_20_out,Multiplexer_19_out,Multiplexer_18_out,Multiplexer_17_out,Multiplexer_16_out,Multiplexer_15_out,Multiplexer_14_out,Multiplexer_13_out,Multiplexer_12_out,Multiplexer_11_out,Multiplexer_10_out,Multiplexer_9_out,Multiplexer_8_out,Multiplexer_7_out,Multiplexer_6_out,Multiplexer_5_out,Multiplexer_4_out,Multiplexer_3_out,Multiplexer_2_out,Multiplexer_1_out,Multiplexer_0_out};
  assign Out = Splitter_1_cmb;
  Multiplexer2 Multiplexer_24(Multiplexer_24_out, In[30], const_0, b2);
  Multiplexer2 Multiplexer_30(Multiplexer_30_out, In[29], const_0, b2);
  Multiplexer2 Multiplexer_29(Multiplexer_29_out, In[28], const_0, b2);
  Multiplexer2 Multiplexer_28(Multiplexer_28_out, In[27], In[31], b2);
  Multiplexer2 Multiplexer_27(Multiplexer_27_out, In[26], In[30], b2);
  Multiplexer2 Multiplexer_26(Multiplexer_26_out, In[25], In[29], b2);
  Multiplexer2 Multiplexer_25(Multiplexer_25_out, In[24], In[28], b2);
  Multiplexer2 Multiplexer_23(Multiplexer_23_out, In[23], In[27], b2);
  Multiplexer2 Multiplexer_22(Multiplexer_22_out, In[22], In[26], b2);
  Multiplexer2 Multiplexer_21(Multiplexer_21_out, In[21], In[25], b2);
  Multiplexer2 Multiplexer_20(Multiplexer_20_out, In[20], In[24], b2);
  Multiplexer2 Multiplexer_19(Multiplexer_19_out, In[19], In[23], b2);
  Multiplexer2 Multiplexer_18(Multiplexer_18_out, In[18], In[22], b2);
  Multiplexer2 Multiplexer_17(Multiplexer_17_out, In[17], In[21], b2);
  Multiplexer2 Multiplexer_16(Multiplexer_16_out, In[16], In[20], b2);
  Multiplexer2 Multiplexer_15(Multiplexer_15_out, In[15], In[19], b2);
  Multiplexer2 Multiplexer_14(Multiplexer_14_out, In[14], In[18], b2);
  Multiplexer2 Multiplexer_13(Multiplexer_13_out, In[13], In[17], b2);
  Multiplexer2 Multiplexer_12(Multiplexer_12_out, In[12], In[16], b2);
  Multiplexer2 Multiplexer_11(Multiplexer_11_out, In[11], In[15], b2);
  Multiplexer2 Multiplexer_10(Multiplexer_10_out, In[10], In[14], b2);
  Multiplexer2 Multiplexer_9(Multiplexer_9_out, In[9], In[13], b2);
  Multiplexer2 Multiplexer_8(Multiplexer_8_out, In[8], In[12], b2);
  Multiplexer2 Multiplexer_7(Multiplexer_7_out, In[7], In[11], b2);
  Multiplexer2 Multiplexer_6(Multiplexer_6_out, In[6], In[10], b2);
  Multiplexer2 Multiplexer_5(Multiplexer_5_out, In[5], In[9], b2);
  Multiplexer2 Multiplexer_4(Multiplexer_4_out, In[4], In[8], b2);
  Multiplexer2 Multiplexer_3(Multiplexer_3_out, In[3], In[7], b2);
  Multiplexer2 Multiplexer_2(Multiplexer_2_out, In[2], In[6], b2);
  Multiplexer2 Multiplexer_1(Multiplexer_1_out, In[1], In[5], b2);
  Multiplexer2 Multiplexer_0(Multiplexer_0_out, In[0], In[4], b2);
  
  assign const_0 = 1'b0;
endmodule

module srl2(Out, In, b1);
  output [31:0] Out;
  input b1;
  input [31:0] In;
  wire Multiplexer_31_out, Multiplexer_24_out, Multiplexer_30_out, Multiplexer_29_out, Multiplexer_28_out, Multiplexer_27_out, Multiplexer_26_out, Multiplexer_25_out, Multiplexer_23_out, Multiplexer_22_out, Multiplexer_21_out, Multiplexer_20_out, Multiplexer_19_out, Multiplexer_18_out, Multiplexer_17_out, Multiplexer_16_out, Multiplexer_15_out, Multiplexer_14_out, Multiplexer_13_out, Multiplexer_12_out, Multiplexer_11_out, Multiplexer_10_out, Multiplexer_9_out, Multiplexer_8_out, Multiplexer_7_out, Multiplexer_6_out, Multiplexer_5_out, Multiplexer_4_out, Multiplexer_3_out, Multiplexer_2_out, Multiplexer_1_out, Multiplexer_0_out, const_0;
  wire [31:0] Splitter_1_cmb;
  Multiplexer2 Multiplexer_31(Multiplexer_31_out, In[31], const_0, b1);
  assign Splitter_1_cmb = {Multiplexer_31_out,Multiplexer_24_out,Multiplexer_30_out,Multiplexer_29_out,Multiplexer_28_out,Multiplexer_27_out,Multiplexer_26_out,Multiplexer_25_out,Multiplexer_23_out,Multiplexer_22_out,Multiplexer_21_out,Multiplexer_20_out,Multiplexer_19_out,Multiplexer_18_out,Multiplexer_17_out,Multiplexer_16_out,Multiplexer_15_out,Multiplexer_14_out,Multiplexer_13_out,Multiplexer_12_out,Multiplexer_11_out,Multiplexer_10_out,Multiplexer_9_out,Multiplexer_8_out,Multiplexer_7_out,Multiplexer_6_out,Multiplexer_5_out,Multiplexer_4_out,Multiplexer_3_out,Multiplexer_2_out,Multiplexer_1_out,Multiplexer_0_out};
  assign Out = Splitter_1_cmb;
  Multiplexer2 Multiplexer_24(Multiplexer_24_out, In[30], const_0, b1);
  Multiplexer2 Multiplexer_30(Multiplexer_30_out, In[29], In[31], b1);
  Multiplexer2 Multiplexer_29(Multiplexer_29_out, In[28], In[30], b1);
  Multiplexer2 Multiplexer_28(Multiplexer_28_out, In[27], In[29], b1);
  Multiplexer2 Multiplexer_27(Multiplexer_27_out, In[26], In[28], b1);
  Multiplexer2 Multiplexer_26(Multiplexer_26_out, In[25], In[27], b1);
  Multiplexer2 Multiplexer_25(Multiplexer_25_out, In[24], In[26], b1);
  Multiplexer2 Multiplexer_23(Multiplexer_23_out, In[23], In[25], b1);
  Multiplexer2 Multiplexer_22(Multiplexer_22_out, In[22], In[24], b1);
  Multiplexer2 Multiplexer_21(Multiplexer_21_out, In[21], In[23], b1);
  Multiplexer2 Multiplexer_20(Multiplexer_20_out, In[20], In[22], b1);
  Multiplexer2 Multiplexer_19(Multiplexer_19_out, In[19], In[21], b1);
  Multiplexer2 Multiplexer_18(Multiplexer_18_out, In[18], In[20], b1);
  Multiplexer2 Multiplexer_17(Multiplexer_17_out, In[17], In[19], b1);
  Multiplexer2 Multiplexer_16(Multiplexer_16_out, In[16], In[18], b1);
  Multiplexer2 Multiplexer_15(Multiplexer_15_out, In[15], In[17], b1);
  Multiplexer2 Multiplexer_14(Multiplexer_14_out, In[14], In[16], b1);
  Multiplexer2 Multiplexer_13(Multiplexer_13_out, In[13], In[15], b1);
  Multiplexer2 Multiplexer_12(Multiplexer_12_out, In[13], In[14], b1);
  Multiplexer2 Multiplexer_11(Multiplexer_11_out, In[11], In[13], b1);
  Multiplexer2 Multiplexer_10(Multiplexer_10_out, In[10], In[13], b1);
  Multiplexer2 Multiplexer_9(Multiplexer_9_out, In[9], In[11], b1);
  Multiplexer2 Multiplexer_8(Multiplexer_8_out, In[8], In[10], b1);
  Multiplexer2 Multiplexer_7(Multiplexer_7_out, In[7], In[9], b1);
  Multiplexer2 Multiplexer_6(Multiplexer_6_out, In[6], In[8], b1);
  Multiplexer2 Multiplexer_5(Multiplexer_5_out, In[5], In[7], b1);
  Multiplexer2 Multiplexer_4(Multiplexer_4_out, In[4], In[6], b1);
  Multiplexer2 Multiplexer_3(Multiplexer_3_out, In[3], In[5], b1);
  Multiplexer2 Multiplexer_2(Multiplexer_2_out, In[2], In[4], b1);
  Multiplexer2 Multiplexer_1(Multiplexer_1_out, In[1], In[3], b1);
  Multiplexer2 Multiplexer_0(Multiplexer_0_out, In[0], In[2], b1);
  
  assign const_0 = 1'b0;
endmodule

module srl1(Out, In, b0);
  output [31:0] Out;
  input b0;
  input [31:0] In;
  wire Multiplexer_31_out, Multiplexer_24_out, Multiplexer_30_out, Multiplexer_29_out, Multiplexer_28_out, Multiplexer_27_out, Multiplexer_26_out, Multiplexer_25_out, Multiplexer_23_out, Multiplexer_22_out, Multiplexer_21_out, Multiplexer_20_out, Multiplexer_19_out, Multiplexer_18_out, Multiplexer_17_out, Multiplexer_16_out, Multiplexer_15_out, Multiplexer_14_out, Multiplexer_13_out, Multiplexer_12_out, Multiplexer_11_out, Multiplexer_10_out, Multiplexer_9_out, Multiplexer_8_out, Multiplexer_7_out, Multiplexer_6_out, Multiplexer_5_out, Multiplexer_4_out, Multiplexer_3_out, Multiplexer_2_out, Multiplexer_1_out, Multiplexer_0_out, const_0;
  wire [31:0] Splitter_1_cmb;
  Multiplexer2 Multiplexer_31(Multiplexer_31_out, In[31], const_0, b0);
  assign Splitter_1_cmb = {Multiplexer_31_out,Multiplexer_24_out,Multiplexer_30_out,Multiplexer_29_out,Multiplexer_28_out,Multiplexer_27_out,Multiplexer_26_out,Multiplexer_25_out,Multiplexer_23_out,Multiplexer_22_out,Multiplexer_21_out,Multiplexer_20_out,Multiplexer_19_out,Multiplexer_18_out,Multiplexer_17_out,Multiplexer_16_out,Multiplexer_15_out,Multiplexer_14_out,Multiplexer_13_out,Multiplexer_12_out,Multiplexer_11_out,Multiplexer_10_out,Multiplexer_9_out,Multiplexer_8_out,Multiplexer_7_out,Multiplexer_6_out,Multiplexer_5_out,Multiplexer_4_out,Multiplexer_3_out,Multiplexer_2_out,Multiplexer_1_out,Multiplexer_0_out};
  assign Out = Splitter_1_cmb;
  Multiplexer2 Multiplexer_24(Multiplexer_24_out, In[30], In[31], b0);
  Multiplexer2 Multiplexer_30(Multiplexer_30_out, In[29], In[30], b0);
  Multiplexer2 Multiplexer_29(Multiplexer_29_out, In[28], In[29], b0);
  Multiplexer2 Multiplexer_28(Multiplexer_28_out, In[27], In[28], b0);
  Multiplexer2 Multiplexer_27(Multiplexer_27_out, In[26], In[27], b0);
  Multiplexer2 Multiplexer_26(Multiplexer_26_out, In[25], In[26], b0);
  Multiplexer2 Multiplexer_25(Multiplexer_25_out, In[24], In[25], b0);
  Multiplexer2 Multiplexer_23(Multiplexer_23_out, In[23], In[24], b0);
  Multiplexer2 Multiplexer_22(Multiplexer_22_out, In[22], In[23], b0);
  Multiplexer2 Multiplexer_21(Multiplexer_21_out, In[21], In[22], b0);
  Multiplexer2 Multiplexer_20(Multiplexer_20_out, In[20], In[21], b0);
  Multiplexer2 Multiplexer_19(Multiplexer_19_out, In[19], In[20], b0);
  Multiplexer2 Multiplexer_18(Multiplexer_18_out, In[18], In[19], b0);
  Multiplexer2 Multiplexer_17(Multiplexer_17_out, In[17], In[18], b0);
  Multiplexer2 Multiplexer_16(Multiplexer_16_out, In[16], In[17], b0);
  Multiplexer2 Multiplexer_15(Multiplexer_15_out, In[15], In[16], b0);
  Multiplexer2 Multiplexer_14(Multiplexer_14_out, In[14], In[15], b0);
  Multiplexer2 Multiplexer_13(Multiplexer_13_out, In[13], In[14], b0);
  Multiplexer2 Multiplexer_12(Multiplexer_12_out, In[12], In[13], b0);
  Multiplexer2 Multiplexer_11(Multiplexer_11_out, In[11], In[12], b0);
  Multiplexer2 Multiplexer_10(Multiplexer_10_out, In[10], In[11], b0);
  Multiplexer2 Multiplexer_9(Multiplexer_9_out, In[9], In[10], b0);
  Multiplexer2 Multiplexer_8(Multiplexer_8_out, In[8], In[9], b0);
  Multiplexer2 Multiplexer_7(Multiplexer_7_out, In[7], In[8], b0);
  Multiplexer2 Multiplexer_6(Multiplexer_6_out, In[6], In[7], b0);
  Multiplexer2 Multiplexer_5(Multiplexer_5_out, In[5], In[6], b0);
  Multiplexer2 Multiplexer_4(Multiplexer_4_out, In[4], In[5], b0);
  Multiplexer2 Multiplexer_3(Multiplexer_3_out, In[3], In[4], b0);
  Multiplexer2 Multiplexer_2(Multiplexer_2_out, In[2], In[3], b0);
  Multiplexer2 Multiplexer_1(Multiplexer_1_out, In[1], In[2], b0);
  Multiplexer2 Multiplexer_0(Multiplexer_0_out, In[0], In[1], b0);
  
  assign const_0 = 1'b0;
endmodule







module BarrelShifter(SH, A, shamnt, ctrl);
  output [31:0] SH;
  input ctrl;
  input [4:0] shamnt;
  input [31:0] A;
  wire not_0_out;
  wire [31:0] DataReversal_0_out, srl16_1_out, srl8_2_out, srl4_3_out, srl2_4_out, srl1_5_out, DataReversal_6_out;
  assign not_0_out = ~ctrl;
  DataReversal DataReversal_0(DataReversal_0_out, not_0_out, A);
  srl16 srl16_1(srl16_1_out, DataReversal_0_out, shamnt[4]);
  srl8 srl8_2(srl8_2_out, srl16_1_out, shamnt[3]);
  srl4 srl4_3(srl4_3_out, srl8_2_out, shamnt[2]);
  srl2 srl2_4(srl2_4_out, srl4_3_out, shamnt[1]);
  srl1 srl1_5(srl1_5_out, srl2_4_out, shamnt[0]);
  DataReversal DataReversal_6(DataReversal_6_out, not_0_out, srl1_5_out);
  assign SH = DataReversal_6_out;
  
endmodule










module XOR(out_0, inp_0, inp_1);
  output [31:0] out_0;
  input [31:0] inp_0, inp_1;
  wire [31:0] not_1_out, and_1_out, or_0_out, and_0_out, not_0_out;
  assign not_1_out = ~inp_1;
  assign and_1_out = inp_0 & not_1_out;
  assign or_0_out = and_0_out | and_1_out;
  assign out_0 = or_0_out;
  assign and_0_out = not_0_out & inp_1;
  assign not_0_out = ~inp_0;
endmodule


module ALU(F, Z, A, B, ctrl);
  output Z;
  output [31:0] F;
  input [2:0] ctrl;
  input [31:0] A, B;
  wire Z_1_out, S_0_out;
  wire [2:0] Splitter_2_cmb;
  wire [30:0] Z31;
  wire [31:0] Multiplexer_0_out, BarrelShifter_2_out, Adder_0_Sum, Splitter_0_cmb, Multiplexer_1_out, not_0_out, XOR_3_out, or_0_out, and_0_out;
  
  assign Splitter_2_cmb = {ctrl[2:1],ctrl[0]};
  Multiplexer8 #(32) Multiplexer_0(Multiplexer_0_out, Adder_0_Sum, Adder_0_Sum, and_0_out, or_0_out, XOR_3_out, Splitter_0_cmb, BarrelShifter_2_out, BarrelShifter_2_out, Splitter_2_cmb);
  Z Z_1(Z_1_out, Multiplexer_0_out);
  assign Z = Z_1_out;
  assign F = Multiplexer_0_out;
  BarrelShifter BarrelShifter_2(BarrelShifter_2_out, A, B[4:0], ctrl[0]);
  assign Adder_0_Sum = A + Multiplexer_1_out + ctrl[0];
  S S_0(S_0_out, Adder_0_Sum);
  assign Splitter_0_cmb = {Z31,S_0_out};
  Multiplexer2 #(32) Multiplexer_1(Multiplexer_1_out, B, not_0_out, ctrl[0]);
  assign not_0_out = ~B;
  XOR XOR_3(XOR_3_out, A, B);
  
  assign or_0_out = A | B;
  assign and_0_out = A & B;
  assign Z31 = 31'b0000000000000000000000000000000;
endmodule























module Processor(clk, clr);
  input clk, clr;
  wire ALU_8_out_0, CtrlUnit_7_out_2, CtrlUnit_7_out_4, CtrlUnit_7_out_6;
  wire [1:0] CtrlUnit_7_out_0, CtrlUnit_7_out_1, CtrlUnit_7_out_5;
  wire [2:0] instr_dec_2_out_3, CtrlUnit_7_out_3;
  wire [4:0] instr_dec_2_out_2, instr_dec_2_out_4, instr_dec_2_out_5;
  wire [6:0] instr_dec_2_out_0, instr_dec_2_out_6;
  wire [19:0] instr_dec_2_out_7;
  wire [24:0] instr_dec_2_out_1;
  wire [31:0] PC_Q, plusImmExt_5_out, Multiplexer_2_out, plus4_4_out, ROM_0_out, sll12_6_out, Multiplexer_1_out, RegFile_1_out_0, RegFile_1_out_1, ALU_8_out_1, RAM_0_DATA_OUT, Multiplexer_0_out, \sign-ext_3_out ;
  DflipFlop #(32) PC(PC_Q, , clk, Multiplexer_2_out, clr, , );
  plusImmExt plusImmExt_5(plusImmExt_5_out, PC_Q, \sign-ext_3_out );
  Multiplexer4 #(32) Multiplexer_2(Multiplexer_2_out, plus4_4_out, plusImmExt_5_out, ALU_8_out_1, ALU_8_out_1, CtrlUnit_7_out_0);
  plus4 plus4_4(plus4_4_out, PC_Q);
  Tunnel #(32) Tunnel_0(plus4_4_out);
  ROM ROM_0(ROM_0_out, PC_Q);
  instr_dec instr_dec_2(instr_dec_2_out_0, instr_dec_2_out_1, instr_dec_2_out_2, instr_dec_2_out_3, instr_dec_2_out_4, instr_dec_2_out_5, instr_dec_2_out_6, instr_dec_2_out_7, ROM_0_out);
  sll12 sll12_6(sll12_6_out, instr_dec_2_out_7);
  Multiplexer4 #(32) Multiplexer_1(Multiplexer_1_out, ALU_8_out_1, RAM_0_DATA_OUT, , sll12_6_out, CtrlUnit_7_out_1);
  RegFile RegFile_1(RegFile_1_out_0, RegFile_1_out_1, CtrlUnit_7_out_6, instr_dec_2_out_2, Multiplexer_1_out, clk, instr_dec_2_out_4, instr_dec_2_out_5);
  ALU ALU_8(ALU_8_out_0, ALU_8_out_1, Multiplexer_0_out, CtrlUnit_7_out_3, RegFile_1_out_1);
  
  RAM #(32) RAM_0(RAM_0_DATA_OUT, ALU_8_out_1[6:0], RegFile_1_out_0, , , );
  CtrlUnit CtrlUnit_7(CtrlUnit_7_out_0, CtrlUnit_7_out_1, CtrlUnit_7_out_2, CtrlUnit_7_out_3, CtrlUnit_7_out_4, CtrlUnit_7_out_5, CtrlUnit_7_out_6, instr_dec_2_out_0, ALU_8_out_0, instr_dec_2_out_3, instr_dec_2_out_6);
  Tunnel #(2) Tunnel_6(CtrlUnit_7_out_5);
  Tunnel Tunnel_4(CtrlUnit_7_out_4);
  Tunnel Tunnel_2(CtrlUnit_7_out_2);
  Multiplexer2 #(32) Multiplexer_0(Multiplexer_0_out, RegFile_1_out_0, \sign-ext_3_out , );
  \sign-ext  \sign-ext_3 (\sign-ext_3_out , instr_dec_2_out_1, );
endmodule

module Multiplexer2(out, in0, in1, sel);
  parameter WIDTH = 1;
  output reg [WIDTH-1:0] out;
  input [WIDTH-1:0] in0, in1;
  input [0:0] sel;
  
  always @ (*)
    case (sel)
      0 : out = in0;
      1 : out = in1;
    endcase
endmodule


module Multiplexer8(out, in0, in1, in2, in3, in4, in5, in6, in7, sel);
  parameter WIDTH = 1;
  output reg [WIDTH-1:0] out;
  input [WIDTH-1:0] in0, in1, in2, in3, in4, in5, in6, in7;
  input [2:0] sel;
  
  always @ (*)
    case (sel)
      0 : out = in0;
      1 : out = in1;
      2 : out = in2;
      3 : out = in3;
      4 : out = in4;
      5 : out = in5;
      6 : out = in6;
      7 : out = in7;
    endcase
endmodule


module Multiplexer32(out, in0, in1, in2, in3, in4, in5, in6, in7, in8, in9, in10, in11, in12, in13, in14, in15, in16, in17, in18, in19, in20, in21, in22, in23, in24, in25, in26, in27, in28, in29, in30, in31, sel);
  parameter WIDTH = 1;
  output reg [WIDTH-1:0] out;
  input [WIDTH-1:0] in0, in1, in2, in3, in4, in5, in6, in7, in8, in9, in10, in11, in12, in13, in14, in15, in16, in17, in18, in19, in20, in21, in22, in23, in24, in25, in26, in27, in28, in29, in30, in31;
  input [4:0] sel;
  
  always @ (*)
    case (sel)
      0 : out = in0;
      1 : out = in1;
      2 : out = in2;
      3 : out = in3;
      4 : out = in4;
      5 : out = in5;
      6 : out = in6;
      7 : out = in7;
      8 : out = in8;
      9 : out = in9;
      10 : out = in10;
      11 : out = in11;
      12 : out = in12;
      13 : out = in13;
      14 : out = in14;
      15 : out = in15;
      16 : out = in16;
      17 : out = in17;
      18 : out = in18;
      19 : out = in19;
      20 : out = in20;
      21 : out = in21;
      22 : out = in22;
      23 : out = in23;
      24 : out = in24;
      25 : out = in25;
      26 : out = in26;
      27 : out = in27;
      28 : out = in28;
      29 : out = in29;
      30 : out = in30;
      31 : out = in31;
    endcase
endmodule


module Multiplexer4(out, in0, in1, in2, in3, sel);
  parameter WIDTH = 1;
  output reg [WIDTH-1:0] out;
  input [WIDTH-1:0] in0, in1, in2, in3;
  input [1:0] sel;
  
  always @ (*)
    case (sel)
      0 : out = in0;
      1 : out = in1;
      2 : out = in2;
      3 : out = in3;
    endcase
endmodule


    module Rom0(dout, addr, en);
    parameter WIDTH = 8;
    parameter ADDR = 4;
    output reg [WIDTH-1:0] dout;
    input [ADDR-1:0] addr;
    input en;

    always @ (*) begin
        if (en == 0)
        dout = {WIDTH{1'bz}};
        else
        case (addr)
            0 : dout = 0;
        1 : dout = 0;
        2 : dout = 0;
        3 : dout = 0;
        4 : dout = 0;
        5 : dout = 0;
        6 : dout = 0;
        7 : dout = 0;
        8 : dout = 0;
        9 : dout = 0;
        10 : dout = 0;
        11 : dout = 0;
        12 : dout = 0;
        13 : dout = 0;
        14 : dout = 0;
        15 : dout = 255;
      endcase
    end
    endmodule
    
    module Rom1(dout, addr, en);
    parameter WIDTH = 8;
    parameter ADDR = 4;
    output reg [WIDTH-1:0] dout;
    input [ADDR-1:0] addr;
    input en;

    always @ (*) begin
        if (en == 0)
        dout = {WIDTH{1'bz}};
        else
        case (addr)
            0 : dout = 0;
        1 : dout = 0;
        2 : dout = 0;
        3 : dout = 0;
        4 : dout = 0;
        5 : dout = 0;
        6 : dout = 0;
        7 : dout = 0;
        8 : dout = 0;
        9 : dout = 0;
        10 : dout = 0;
        11 : dout = 0;
        12 : dout = 0;
        13 : dout = 0;
        14 : dout = 0;
        15 : dout = 255;
      endcase
    end
    endmodule
    
    module Rom2(dout, addr, en);
    parameter WIDTH = 8;
    parameter ADDR = 4;
    output reg [WIDTH-1:0] dout;
    input [ADDR-1:0] addr;
    input en;

    always @ (*) begin
        if (en == 0)
        dout = {WIDTH{1'bz}};
        else
        case (addr)
            0 : dout = 0;
        1 : dout = 0;
        2 : dout = 0;
        3 : dout = 0;
        4 : dout = 0;
        5 : dout = 0;
        6 : dout = 0;
        7 : dout = 0;
        8 : dout = 0;
        9 : dout = 0;
        10 : dout = 0;
        11 : dout = 0;
        12 : dout = 0;
        13 : dout = 0;
        14 : dout = 0;
        15 : dout = 255;
      endcase
    end
    endmodule
    
    module Rom3(dout, addr, en);
    parameter WIDTH = 8;
    parameter ADDR = 4;
    output reg [WIDTH-1:0] dout;
    input [ADDR-1:0] addr;
    input en;

    always @ (*) begin
        if (en == 0)
        dout = {WIDTH{1'bz}};
        else
        case (addr)
            0 : dout = 0;
        1 : dout = 0;
        2 : dout = 0;
        3 : dout = 0;
        4 : dout = 0;
        5 : dout = 0;
        6 : dout = 0;
        7 : dout = 0;
        8 : dout = 0;
        9 : dout = 0;
        10 : dout = 0;
        11 : dout = 0;
        12 : dout = 0;
        13 : dout = 0;
        14 : dout = 0;
        15 : dout = 255;
      endcase
    end
    endmodule
    
    module Rom4(dout, addr, en);
    parameter WIDTH = 8;
    parameter ADDR = 4;
    output reg [WIDTH-1:0] dout;
    input [ADDR-1:0] addr;
    input en;

    always @ (*) begin
        if (en == 0)
        dout = {WIDTH{1'bz}};
        else
        case (addr)
            0 : dout = 0;
        1 : dout = 0;
        2 : dout = 0;
        3 : dout = 0;
        4 : dout = 0;
        5 : dout = 0;
        6 : dout = 0;
        7 : dout = 0;
        8 : dout = 0;
        9 : dout = 0;
        10 : dout = 0;
        11 : dout = 0;
        12 : dout = 0;
        13 : dout = 0;
        14 : dout = 0;
        15 : dout = 0;
      endcase
    end
    endmodule
    
    module Rom5(dout, addr, en);
    parameter WIDTH = 8;
    parameter ADDR = 4;
    output reg [WIDTH-1:0] dout;
    input [ADDR-1:0] addr;
    input en;

    always @ (*) begin
        if (en == 0)
        dout = {WIDTH{1'bz}};
        else
        case (addr)
            0 : dout = 0;
        1 : dout = 0;
        2 : dout = 0;
        3 : dout = 0;
        4 : dout = 0;
        5 : dout = 0;
        6 : dout = 0;
        7 : dout = 0;
        8 : dout = 0;
        9 : dout = 0;
        10 : dout = 0;
        11 : dout = 0;
        12 : dout = 0;
        13 : dout = 0;
        14 : dout = 0;
        15 : dout = 0;
      endcase
    end
    endmodule
    
    module Rom6(dout, addr, en);
    parameter WIDTH = 8;
    parameter ADDR = 4;
    output reg [WIDTH-1:0] dout;
    input [ADDR-1:0] addr;
    input en;

    always @ (*) begin
        if (en == 0)
        dout = {WIDTH{1'bz}};
        else
        case (addr)
            0 : dout = 0;
        1 : dout = 0;
        2 : dout = 0;
        3 : dout = 0;
        4 : dout = 0;
        5 : dout = 0;
        6 : dout = 0;
        7 : dout = 0;
        8 : dout = 0;
        9 : dout = 0;
        10 : dout = 0;
        11 : dout = 0;
        12 : dout = 0;
        13 : dout = 0;
        14 : dout = 0;
        15 : dout = 0;
      endcase
    end
    endmodule
    
    module Rom7(dout, addr, en);
    parameter WIDTH = 8;
    parameter ADDR = 4;
    output reg [WIDTH-1:0] dout;
    input [ADDR-1:0] addr;
    input en;

    always @ (*) begin
        if (en == 0)
        dout = {WIDTH{1'bz}};
        else
        case (addr)
            0 : dout = 0;
        1 : dout = 0;
        2 : dout = 0;
        3 : dout = 0;
        4 : dout = 0;
        5 : dout = 0;
        6 : dout = 0;
        7 : dout = 0;
        8 : dout = 0;
        9 : dout = 0;
        10 : dout = 0;
        11 : dout = 0;
        12 : dout = 0;
        13 : dout = 0;
        14 : dout = 0;
        15 : dout = 0;
      endcase
    end
    endmodule
    
    module Rom8(dout, addr, en);
    parameter WIDTH = 8;
    parameter ADDR = 4;
    output reg [WIDTH-1:0] dout;
    input [ADDR-1:0] addr;
    input en;

    always @ (*) begin
        if (en == 0)
        dout = {WIDTH{1'bz}};
        else
        case (addr)
            0 : dout = 0;
        1 : dout = 0;
        2 : dout = 0;
        3 : dout = 0;
        4 : dout = 0;
        5 : dout = 0;
        6 : dout = 0;
        7 : dout = 0;
        8 : dout = 0;
        9 : dout = 0;
        10 : dout = 0;
        11 : dout = 0;
        12 : dout = 0;
        13 : dout = 0;
        14 : dout = 0;
        15 : dout = 0;
      endcase
    end
    endmodule
    
    module Rom9(dout, addr, en);
    parameter WIDTH = 8;
    parameter ADDR = 4;
    output reg [WIDTH-1:0] dout;
    input [ADDR-1:0] addr;
    input en;

    always @ (*) begin
        if (en == 0)
        dout = {WIDTH{1'bz}};
        else
        case (addr)
            0 : dout = 0;
        1 : dout = 0;
        2 : dout = 0;
        3 : dout = 0;
        4 : dout = 0;
        5 : dout = 0;
        6 : dout = 0;
        7 : dout = 0;
        8 : dout = 0;
        9 : dout = 0;
        10 : dout = 0;
        11 : dout = 0;
        12 : dout = 0;
        13 : dout = 0;
        14 : dout = 0;
        15 : dout = 0;
      endcase
    end
    endmodule
    
    module Rom10(dout, addr, en);
    parameter WIDTH = 8;
    parameter ADDR = 4;
    output reg [WIDTH-1:0] dout;
    input [ADDR-1:0] addr;
    input en;

    always @ (*) begin
        if (en == 0)
        dout = {WIDTH{1'bz}};
        else
        case (addr)
            0 : dout = 0;
        1 : dout = 0;
        2 : dout = 0;
        3 : dout = 0;
        4 : dout = 0;
        5 : dout = 0;
        6 : dout = 0;
        7 : dout = 0;
        8 : dout = 0;
        9 : dout = 0;
        10 : dout = 0;
        11 : dout = 0;
        12 : dout = 0;
        13 : dout = 0;
        14 : dout = 0;
        15 : dout = 0;
      endcase
    end
    endmodule
    
    module Rom11(dout, addr, en);
    parameter WIDTH = 8;
    parameter ADDR = 4;
    output reg [WIDTH-1:0] dout;
    input [ADDR-1:0] addr;
    input en;

    always @ (*) begin
        if (en == 0)
        dout = {WIDTH{1'bz}};
        else
        case (addr)
            0 : dout = 0;
        1 : dout = 0;
        2 : dout = 0;
        3 : dout = 0;
        4 : dout = 0;
        5 : dout = 0;
        6 : dout = 0;
        7 : dout = 0;
        8 : dout = 0;
        9 : dout = 0;
        10 : dout = 0;
        11 : dout = 0;
        12 : dout = 0;
        13 : dout = 0;
        14 : dout = 0;
        15 : dout = 0;
      endcase
    end
    endmodule
    
    module Rom12(dout, addr, en);
    parameter WIDTH = 8;
    parameter ADDR = 4;
    output reg [WIDTH-1:0] dout;
    input [ADDR-1:0] addr;
    input en;

    always @ (*) begin
        if (en == 0)
        dout = {WIDTH{1'bz}};
        else
        case (addr)
            0 : dout = 0;
        1 : dout = 0;
        2 : dout = 0;
        3 : dout = 0;
        4 : dout = 0;
        5 : dout = 0;
        6 : dout = 0;
        7 : dout = 0;
        8 : dout = 0;
        9 : dout = 0;
        10 : dout = 0;
        11 : dout = 0;
        12 : dout = 0;
        13 : dout = 0;
        14 : dout = 0;
        15 : dout = 0;
      endcase
    end
    endmodule
    
    module Rom13(dout, addr, en);
    parameter WIDTH = 8;
    parameter ADDR = 4;
    output reg [WIDTH-1:0] dout;
    input [ADDR-1:0] addr;
    input en;

    always @ (*) begin
        if (en == 0)
        dout = {WIDTH{1'bz}};
        else
        case (addr)
            0 : dout = 0;
        1 : dout = 0;
        2 : dout = 0;
        3 : dout = 0;
        4 : dout = 0;
        5 : dout = 0;
        6 : dout = 0;
        7 : dout = 0;
        8 : dout = 0;
        9 : dout = 0;
        10 : dout = 0;
        11 : dout = 0;
        12 : dout = 0;
        13 : dout = 0;
        14 : dout = 0;
        15 : dout = 0;
      endcase
    end
    endmodule
    
    module Rom14(dout, addr, en);
    parameter WIDTH = 8;
    parameter ADDR = 4;
    output reg [WIDTH-1:0] dout;
    input [ADDR-1:0] addr;
    input en;

    always @ (*) begin
        if (en == 0)
        dout = {WIDTH{1'bz}};
        else
        case (addr)
            0 : dout = 0;
        1 : dout = 0;
        2 : dout = 0;
        3 : dout = 0;
        4 : dout = 0;
        5 : dout = 0;
        6 : dout = 0;
        7 : dout = 0;
        8 : dout = 0;
        9 : dout = 0;
        10 : dout = 0;
        11 : dout = 0;
        12 : dout = 0;
        13 : dout = 0;
        14 : dout = 0;
        15 : dout = 0;
      endcase
    end
    endmodule
    
    module Rom15(dout, addr, en);
    parameter WIDTH = 8;
    parameter ADDR = 4;
    output reg [WIDTH-1:0] dout;
    input [ADDR-1:0] addr;
    input en;

    always @ (*) begin
        if (en == 0)
        dout = {WIDTH{1'bz}};
        else
        case (addr)
            0 : dout = 0;
        1 : dout = 0;
        2 : dout = 0;
        3 : dout = 0;
        4 : dout = 0;
        5 : dout = 0;
        6 : dout = 0;
        7 : dout = 0;
        8 : dout = 0;
        9 : dout = 0;
        10 : dout = 0;
        11 : dout = 0;
        12 : dout = 0;
        13 : dout = 0;
        14 : dout = 0;
        15 : dout = 0;
      endcase
    end
    endmodule
    
    module Rom16(dout, addr, en);
    parameter WIDTH = 8;
    parameter ADDR = 4;
    output reg [WIDTH-1:0] dout;
    input [ADDR-1:0] addr;
    input en;

    always @ (*) begin
        if (en == 0)
        dout = {WIDTH{1'bz}};
        else
        case (addr)
            0 : dout = 0;
        1 : dout = 0;
        2 : dout = 0;
        3 : dout = 0;
        4 : dout = 0;
        5 : dout = 0;
        6 : dout = 0;
        7 : dout = 0;
        8 : dout = 0;
        9 : dout = 0;
        10 : dout = 0;
        11 : dout = 0;
        12 : dout = 0;
        13 : dout = 0;
        14 : dout = 0;
        15 : dout = 0;
      endcase
    end
    endmodule
    
    module Rom17(dout, addr, en);
    parameter WIDTH = 8;
    parameter ADDR = 4;
    output reg [WIDTH-1:0] dout;
    input [ADDR-1:0] addr;
    input en;

    always @ (*) begin
        if (en == 0)
        dout = {WIDTH{1'bz}};
        else
        case (addr)
            0 : dout = 0;
        1 : dout = 0;
        2 : dout = 0;
        3 : dout = 0;
        4 : dout = 0;
        5 : dout = 0;
        6 : dout = 0;
        7 : dout = 0;
        8 : dout = 0;
        9 : dout = 0;
        10 : dout = 0;
        11 : dout = 0;
        12 : dout = 0;
        13 : dout = 0;
        14 : dout = 0;
        15 : dout = 0;
      endcase
    end
    endmodule
    
    module Rom18(dout, addr, en);
    parameter WIDTH = 8;
    parameter ADDR = 4;
    output reg [WIDTH-1:0] dout;
    input [ADDR-1:0] addr;
    input en;

    always @ (*) begin
        if (en == 0)
        dout = {WIDTH{1'bz}};
        else
        case (addr)
            0 : dout = 0;
        1 : dout = 0;
        2 : dout = 0;
        3 : dout = 0;
        4 : dout = 0;
        5 : dout = 0;
        6 : dout = 0;
        7 : dout = 0;
        8 : dout = 0;
        9 : dout = 0;
        10 : dout = 0;
        11 : dout = 0;
        12 : dout = 0;
        13 : dout = 0;
        14 : dout = 0;
        15 : dout = 0;
      endcase
    end
    endmodule
    
    module Rom19(dout, addr, en);
    parameter WIDTH = 8;
    parameter ADDR = 4;
    output reg [WIDTH-1:0] dout;
    input [ADDR-1:0] addr;
    input en;

    always @ (*) begin
        if (en == 0)
        dout = {WIDTH{1'bz}};
        else
        case (addr)
            0 : dout = 0;
        1 : dout = 0;
        2 : dout = 0;
        3 : dout = 0;
        4 : dout = 0;
        5 : dout = 0;
        6 : dout = 0;
        7 : dout = 0;
        8 : dout = 0;
        9 : dout = 0;
        10 : dout = 0;
        11 : dout = 0;
        12 : dout = 0;
        13 : dout = 0;
        14 : dout = 0;
        15 : dout = 0;
      endcase
    end
    endmodule
    
    module Rom20(dout, addr, en);
    parameter WIDTH = 8;
    parameter ADDR = 4;
    output reg [WIDTH-1:0] dout;
    input [ADDR-1:0] addr;
    input en;

    always @ (*) begin
        if (en == 0)
        dout = {WIDTH{1'bz}};
        else
        case (addr)
            0 : dout = 0;
        1 : dout = 0;
        2 : dout = 0;
        3 : dout = 0;
        4 : dout = 0;
        5 : dout = 0;
        6 : dout = 0;
        7 : dout = 0;
        8 : dout = 0;
        9 : dout = 0;
        10 : dout = 0;
        11 : dout = 0;
        12 : dout = 0;
        13 : dout = 0;
        14 : dout = 0;
        15 : dout = 0;
      endcase
    end
    endmodule
    
    module Rom21(dout, addr, en);
    parameter WIDTH = 8;
    parameter ADDR = 4;
    output reg [WIDTH-1:0] dout;
    input [ADDR-1:0] addr;
    input en;

    always @ (*) begin
        if (en == 0)
        dout = {WIDTH{1'bz}};
        else
        case (addr)
            0 : dout = 0;
        1 : dout = 0;
        2 : dout = 0;
        3 : dout = 0;
        4 : dout = 0;
        5 : dout = 0;
        6 : dout = 0;
        7 : dout = 0;
        8 : dout = 0;
        9 : dout = 0;
        10 : dout = 0;
        11 : dout = 0;
        12 : dout = 0;
        13 : dout = 0;
        14 : dout = 0;
        15 : dout = 0;
      endcase
    end
    endmodule
    
    module Rom22(dout, addr, en);
    parameter WIDTH = 8;
    parameter ADDR = 4;
    output reg [WIDTH-1:0] dout;
    input [ADDR-1:0] addr;
    input en;

    always @ (*) begin
        if (en == 0)
        dout = {WIDTH{1'bz}};
        else
        case (addr)
            0 : dout = 0;
        1 : dout = 0;
        2 : dout = 0;
        3 : dout = 0;
        4 : dout = 0;
        5 : dout = 0;
        6 : dout = 0;
        7 : dout = 0;
        8 : dout = 0;
        9 : dout = 0;
        10 : dout = 0;
        11 : dout = 0;
        12 : dout = 0;
        13 : dout = 0;
        14 : dout = 0;
        15 : dout = 0;
      endcase
    end
    endmodule
    
    module Rom23(dout, addr, en);
    parameter WIDTH = 8;
    parameter ADDR = 4;
    output reg [WIDTH-1:0] dout;
    input [ADDR-1:0] addr;
    input en;

    always @ (*) begin
        if (en == 0)
        dout = {WIDTH{1'bz}};
        else
        case (addr)
            0 : dout = 0;
        1 : dout = 0;
        2 : dout = 0;
        3 : dout = 0;
        4 : dout = 0;
        5 : dout = 0;
        6 : dout = 0;
        7 : dout = 0;
        8 : dout = 0;
        9 : dout = 0;
        10 : dout = 0;
        11 : dout = 0;
        12 : dout = 0;
        13 : dout = 0;
        14 : dout = 0;
        15 : dout = 0;
      endcase
    end
    endmodule
    
    module Rom24(dout, addr, en);
    parameter WIDTH = 8;
    parameter ADDR = 4;
    output reg [WIDTH-1:0] dout;
    input [ADDR-1:0] addr;
    input en;

    always @ (*) begin
        if (en == 0)
        dout = {WIDTH{1'bz}};
        else
        case (addr)
            0 : dout = 0;
        1 : dout = 0;
        2 : dout = 0;
        3 : dout = 0;
        4 : dout = 0;
        5 : dout = 0;
        6 : dout = 0;
        7 : dout = 0;
        8 : dout = 0;
        9 : dout = 0;
        10 : dout = 0;
        11 : dout = 0;
        12 : dout = 0;
        13 : dout = 0;
        14 : dout = 0;
        15 : dout = 0;
      endcase
    end
    endmodule
    
    module Rom25(dout, addr, en);
    parameter WIDTH = 8;
    parameter ADDR = 4;
    output reg [WIDTH-1:0] dout;
    input [ADDR-1:0] addr;
    input en;

    always @ (*) begin
        if (en == 0)
        dout = {WIDTH{1'bz}};
        else
        case (addr)
            0 : dout = 0;
        1 : dout = 0;
        2 : dout = 0;
        3 : dout = 0;
        4 : dout = 0;
        5 : dout = 0;
        6 : dout = 0;
        7 : dout = 0;
        8 : dout = 0;
        9 : dout = 0;
        10 : dout = 0;
        11 : dout = 0;
        12 : dout = 0;
        13 : dout = 0;
        14 : dout = 0;
        15 : dout = 0;
      endcase
    end
    endmodule
    
    module Rom26(dout, addr, en);
    parameter WIDTH = 8;
    parameter ADDR = 4;
    output reg [WIDTH-1:0] dout;
    input [ADDR-1:0] addr;
    input en;

    always @ (*) begin
        if (en == 0)
        dout = {WIDTH{1'bz}};
        else
        case (addr)
            0 : dout = 0;
        1 : dout = 0;
        2 : dout = 0;
        3 : dout = 0;
        4 : dout = 0;
        5 : dout = 0;
        6 : dout = 0;
        7 : dout = 0;
        8 : dout = 0;
        9 : dout = 0;
        10 : dout = 0;
        11 : dout = 0;
        12 : dout = 0;
        13 : dout = 0;
        14 : dout = 0;
        15 : dout = 0;
      endcase
    end
    endmodule
    
    module Rom27(dout, addr, en);
    parameter WIDTH = 8;
    parameter ADDR = 4;
    output reg [WIDTH-1:0] dout;
    input [ADDR-1:0] addr;
    input en;

    always @ (*) begin
        if (en == 0)
        dout = {WIDTH{1'bz}};
        else
        case (addr)
            0 : dout = 0;
        1 : dout = 0;
        2 : dout = 0;
        3 : dout = 0;
        4 : dout = 0;
        5 : dout = 0;
        6 : dout = 0;
        7 : dout = 0;
        8 : dout = 0;
        9 : dout = 0;
        10 : dout = 0;
        11 : dout = 0;
        12 : dout = 0;
        13 : dout = 0;
        14 : dout = 0;
        15 : dout = 0;
      endcase
    end
    endmodule
    
    module Rom28(dout, addr, en);
    parameter WIDTH = 8;
    parameter ADDR = 4;
    output reg [WIDTH-1:0] dout;
    input [ADDR-1:0] addr;
    input en;

    always @ (*) begin
        if (en == 0)
        dout = {WIDTH{1'bz}};
        else
        case (addr)
            0 : dout = 0;
        1 : dout = 17;
        2 : dout = 0;
        3 : dout = 0;
        4 : dout = 0;
        5 : dout = 0;
        6 : dout = 0;
        7 : dout = 0;
        8 : dout = 0;
        9 : dout = 0;
        10 : dout = 0;
        11 : dout = 0;
        12 : dout = 0;
        13 : dout = 0;
        14 : dout = 0;
        15 : dout = 0;
      endcase
    end
    endmodule
    
    module Rom29(dout, addr, en);
    parameter WIDTH = 8;
    parameter ADDR = 4;
    output reg [WIDTH-1:0] dout;
    input [ADDR-1:0] addr;
    input en;

    always @ (*) begin
        if (en == 0)
        dout = {WIDTH{1'bz}};
        else
        case (addr)
            0 : dout = 0;
        1 : dout = 17;
        2 : dout = 0;
        3 : dout = 0;
        4 : dout = 0;
        5 : dout = 0;
        6 : dout = 0;
        7 : dout = 0;
        8 : dout = 0;
        9 : dout = 0;
        10 : dout = 0;
        11 : dout = 0;
        12 : dout = 0;
        13 : dout = 0;
        14 : dout = 0;
        15 : dout = 0;
      endcase
    end
    endmodule
    
    module Rom30(dout, addr, en);
    parameter WIDTH = 8;
    parameter ADDR = 4;
    output reg [WIDTH-1:0] dout;
    input [ADDR-1:0] addr;
    input en;

    always @ (*) begin
        if (en == 0)
        dout = {WIDTH{1'bz}};
        else
        case (addr)
            0 : dout = 0;
        1 : dout = 17;
        2 : dout = 0;
        3 : dout = 0;
        4 : dout = 0;
        5 : dout = 0;
        6 : dout = 0;
        7 : dout = 0;
        8 : dout = 0;
        9 : dout = 0;
        10 : dout = 0;
        11 : dout = 0;
        12 : dout = 0;
        13 : dout = 0;
        14 : dout = 0;
        15 : dout = 0;
      endcase
    end
    endmodule
    
    module Rom31(dout, addr, en);
    parameter WIDTH = 8;
    parameter ADDR = 4;
    output reg [WIDTH-1:0] dout;
    input [ADDR-1:0] addr;
    input en;

    always @ (*) begin
        if (en == 0)
        dout = {WIDTH{1'bz}};
        else
        case (addr)
            0 : dout = 0;
        1 : dout = 17;
        2 : dout = 0;
        3 : dout = 0;
        4 : dout = 0;
        5 : dout = 0;
        6 : dout = 0;
        7 : dout = 0;
        8 : dout = 0;
        9 : dout = 0;
        10 : dout = 0;
        11 : dout = 0;
        12 : dout = 0;
        13 : dout = 0;
        14 : dout = 0;
        15 : dout = 0;
      endcase
    end
    endmodule
    
module DflipFlop(q, q_inv, clk, d, a_rst, pre, en);
    parameter WIDTH = 1;
    output reg [WIDTH-1:0] q, q_inv;
    input clk, a_rst, pre, en;
    input [WIDTH-1:0] d;

    always @ (posedge clk or posedge a_rst)
    if (a_rst) begin
        q <= 'b0;
        q_inv <= 'b1;
    end else if (en == 0) ;
    else begin
        q <= d;
        q_inv <= ~d;
    end
endmodule
    
module Demultiplexer32(out0, out1, out2, out3, out4, out5, out6, out7, out8, out9, out10, out11, out12, out13, out14, out15, out16, out17, out18, out19, out20, out21, out22, out23, out24, out25, out26, out27, out28, out29, out30, out31, in, sel);
  parameter WIDTH = 1;
  output reg [WIDTH-1:0] out0, out1, out2, out3, out4, out5, out6, out7, out8, out9, out10, out11, out12, out13, out14, out15, out16, out17, out18, out19, out20, out21, out22, out23, out24, out25, out26, out27, out28, out29, out30, out31;
  input [WIDTH-1:0] in;
  input [4:0] sel;
  
  always @ (*) begin
    out0 = 0;
    out1 = 0;
    out2 = 0;
    out3 = 0;
    out4 = 0;
    out5 = 0;
    out6 = 0;
    out7 = 0;
    out8 = 0;
    out9 = 0;
    out10 = 0;
    out11 = 0;
    out12 = 0;
    out13 = 0;
    out14 = 0;
    out15 = 0;
    out16 = 0;
    out17 = 0;
    out18 = 0;
    out19 = 0;
    out20 = 0;
    out21 = 0;
    out22 = 0;
    out23 = 0;
    out24 = 0;
    out25 = 0;
    out26 = 0;
    out27 = 0;
    out28 = 0;
    out29 = 0;
    out30 = 0;
    out31 = 0;
    case (sel)
      0 : out0 = in;
      1 : out1 = in;
      2 : out2 = in;
      3 : out3 = in;
      4 : out4 = in;
      5 : out5 = in;
      6 : out6 = in;
      7 : out7 = in;
      8 : out8 = in;
      9 : out9 = in;
      10 : out10 = in;
      11 : out11 = in;
      12 : out12 = in;
      13 : out13 = in;
      14 : out14 = in;
      15 : out15 = in;
      16 : out16 = in;
      17 : out17 = in;
      18 : out18 = in;
      19 : out19 = in;
      20 : out20 = in;
      21 : out21 = in;
      22 : out22 = in;
      23 : out23 = in;
      24 : out24 = in;
      25 : out25 = in;
      26 : out26 = in;
      27 : out27 = in;
      28 : out28 = in;
      29 : out29 = in;
      30 : out30 = in;
      31 : out31 = in;
    endcase
  end
endmodule

module Demultiplexer32(out0, out1, out2, out3, out4, out5, out6, out7, out8, out9, out10, out11, out12, out13, out14, out15, out16, out17, out18, out19, out20, out21, out22, out23, out24, out25, out26, out27, out28, out29, out30, out31, in, sel);
  parameter WIDTH = 1;
  output reg [WIDTH-1:0] out0, out1, out2, out3, out4, out5, out6, out7, out8, out9, out10, out11, out12, out13, out14, out15, out16, out17, out18, out19, out20, out21, out22, out23, out24, out25, out26, out27, out28, out29, out30, out31;
  input [WIDTH-1:0] in;
  input [4:0] sel;
  
  always @ (*) begin
    out0 = 0;
    out1 = 0;
    out2 = 0;
    out3 = 0;
    out4 = 0;
    out5 = 0;
    out6 = 0;
    out7 = 0;
    out8 = 0;
    out9 = 0;
    out10 = 0;
    out11 = 0;
    out12 = 0;
    out13 = 0;
    out14 = 0;
    out15 = 0;
    out16 = 0;
    out17 = 0;
    out18 = 0;
    out19 = 0;
    out20 = 0;
    out21 = 0;
    out22 = 0;
    out23 = 0;
    out24 = 0;
    out25 = 0;
    out26 = 0;
    out27 = 0;
    out28 = 0;
    out29 = 0;
    out30 = 0;
    out31 = 0;
    case (sel)
      0 : out0 = in;
      1 : out1 = in;
      2 : out2 = in;
      3 : out3 = in;
      4 : out4 = in;
      5 : out5 = in;
      6 : out6 = in;
      7 : out7 = in;
      8 : out8 = in;
      9 : out9 = in;
      10 : out10 = in;
      11 : out11 = in;
      12 : out12 = in;
      13 : out13 = in;
      14 : out14 = in;
      15 : out15 = in;
      16 : out16 = in;
      17 : out17 = in;
      18 : out18 = in;
      19 : out19 = in;
      20 : out20 = in;
      21 : out21 = in;
      22 : out22 = in;
      23 : out23 = in;
      24 : out24 = in;
      25 : out25 = in;
      26 : out26 = in;
      27 : out27 = in;
      28 : out28 = in;
      29 : out29 = in;
      30 : out30 = in;
      31 : out31 = in;
    endcase
  end
endmodule

    module RAM(dout, addr, din, we, dmp, rst);
        parameter WIDTH = 8;
        parameter ADDR = 10;
        output [WIDTH-1:0] dout;
        input [ADDR-1:0] addr;
        input [WIDTH-1:0] din;
        input we;
        input dmp;
        input rst;
        reg [WIDTH-1:0] mem [2**ADDR-1:0];
    
        assign dout = mem[addr];
    
        always @ (*) begin
        if (!we)
            mem[addr] = din;
        end
    endmodule
    